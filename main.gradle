allprojects {
    apply plugin: "java"
    apply plugin: "jacoco"
    apply plugin: 'org.sonarqube'
    sourceCompatibility = JavaVersion.VERSION_11

    repositories {
        mavenCentral()
    }

    sonarqube {
        properties {
            property "sonar.sourceEncoding", "UTF-8"
            property "sonar.projectKey", "bancolombia_bin-stash"
            property "sonar.organization", "grupo-bancolombia"
            property "sonar.host.url", "https://sonarcloud.io/"
            property "sonar.sources", "src/main"
            property "sonar.test", "src/test"
            property "sonar.java.binaries", "build/classes"
            property "sonar.junit.reportPaths", "build/test-results/test"
            property "sonar.java-coveragePlugin", "jacoco"
            property "sonar.coverage.jacoco.xmlReportPaths", "${rootDir}/build/reports/jacoco/generateMergedReport/generateMergedReport.xml"
            property "sonar.exclusions", ".github/**"
        }
    }
}
subprojects {

    apply plugin: 'java-library'
    apply plugin: "maven"
    apply plugin: "maven-publish"
    apply plugin: "io.spring.dependency-management"
    apply plugin: 'signing'

    ext {
        pomConfig = {
            licenses {
                license {
                    name "MIT License"
                    url "https://opensource.org/licenses/mit-license.php"
                    distribution "repo"
                }
            }
            developers {
                developer {
                    id "gabheadz"
                    name "Gabriel Martinez"
                    email "gabrieljm@gmail.com"
                }
            }

            scm {
                url "git@github.com:bancolombia/bin-stash.git"
            }
        }
        groupId = 'com.github.bancolombia'
    }

    dependencies {
        implementation 'io.projectreactor:reactor-core'
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'
        testCompileOnly 'org.projectlombok:lombok'
        testImplementation 'io.projectreactor:reactor-test'
        testImplementation(platform('org.junit:junit-bom:5.7.0'))
        testImplementation('org.junit.jupiter:junit-jupiter')
        testImplementation 'org.mockito:mockito-inline:3.7.7'
        testImplementation 'org.mockito:mockito-junit-jupiter:3.7.7'
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    test {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
        }
    }

    test.finalizedBy(project.tasks.jacocoTestReport)

    jacocoTestReport {
        dependsOn test
        reports {
            xml.enabled true
            xml.destination file("${buildDir}/reports/jacoco.xml")
            csv.enabled false
            html.destination file("${buildDir}/reports/jacocoHtml")
        }
    }
    compileJava {
        options.compilerArgs = [
                '-Amapstruct.suppressGeneratorTimestamp=true',
                '-Amapstruct.suppressGeneratorVersionInfoComment=true'
        ]
    }

    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }

    if (project.hasProperty('signing.keyId')) {
        signing {
            sign publishing.publications.mavenJava
        }
    }

    task sourcesJar(type: Jar) {
        classifier "sources"
        from sourceSets.main.allJava
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java

                artifact sourcesJar
                artifact javadocJar

                groupId = groupId
                artifactId = artifactId
                version = project.property('version')

                pom.withXml {
                    def root = asNode()
                    root.appendNode('description', artifactDescription)
                    root.appendNode('name', artifactId)
                    root.appendNode('url', 'https://github.com/bancolombia/bin-stash')
                    root.children().last() + pomConfig
                }
            }
        }
        repositories {
            maven {
                name = "OSSRH"
                url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                credentials {
                    username = System.getenv("MAVEN_USERNAME")
                    password = System.getenv("MAVEN_PASSWORD")
                }
            }
        }
    }

//    task jacocoMergedReport(type: JacocoReport) {
//        dependsOn = subprojects.jacocoTestReport
//        additionalSourceDirs.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
//        sourceDirectories.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
//        classDirectories.setFrom files(subprojects.sourceSets.main.output)
//        executionData.setFrom project.fileTree(dir: '.', include: '**/build/jacoco/test.exec')
//
//        reports {
//            xml.enabled true
//            xml.destination = file("${buildDir}/jacoco/report.xml")
//            csv.enabled false
//            html.enabled true
//            html.destination = file("${buildDir}/jacoco")
//        }
//    }
}

task generateMergedReport(type: JacocoReport) {
    dependsOn = subprojects.test
    additionalSourceDirs.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.setFrom files(subprojects.sourceSets.main.output)
    executionData.setFrom project.fileTree(dir: '.', include: '**/build/jacoco/test.exec')
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
    }
}


