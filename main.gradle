allprojects {
    apply plugin: "java"
    apply plugin: "jacoco"
    apply plugin: "maven-publish"
//    apply plugin: "signing"
    apply plugin: "io.spring.dependency-management"
    sourceCompatibility = JavaVersion.VERSION_11
    repositories {
        mavenLocal()
        mavenCentral()
    }
}
subprojects {

    dependencies {
        implementation 'io.projectreactor:reactor-core'
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'
        testCompileOnly 'org.projectlombok:lombok'
        testImplementation 'io.projectreactor:reactor-test'
        testImplementation(platform('org.junit:junit-bom:5.7.0'))
        testImplementation('org.junit.jupiter:junit-jupiter')
        testImplementation 'org.mockito:mockito-inline:3.7.7'
        testImplementation 'org.mockito:mockito-junit-jupiter:3.7.7'
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    test {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
        }
    }

    test.finalizedBy(project.tasks.jacocoTestReport)

    jacocoTestReport {
        dependsOn test
        reports {
            xml.enabled true
            xml.destination file("${buildDir}/reports/jacoco.xml")
            csv.enabled false
            html.destination file("${buildDir}/reports/jacocoHtml")
        }
    }
    compileJava {
        options.compilerArgs = [
                '-Amapstruct.suppressGeneratorTimestamp=true',
                '-Amapstruct.suppressGeneratorVersionInfoComment=true'
        ]
    }

//    task javadocJar(type: Jar) {
//        classifier = 'javadoc'
//        from javadoc
//    }
//
//    task sourcesJar(type: Jar) {
//        classifier = 'sources'
//        from sourceSets.main.allSource
//    }
//
//    artifacts {
//        archives javadocJar, sourcesJar
//    }
//
//    signing {
//        sign configurations.archives
//    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                versionMapping {
                    usage('java-runtime') {
                        fromResolutionResult()
                    }
                }
                from components.java
            }
        }
        repositories {
            maven {
                name = "OSSRH"
                url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                credentials {
                    username = System.getenv("MAVEN_USERNAME")
                    password = System.getenv("MAVEN_PASSWORD")
                }
            }
        }
    }

    task jacocoMergedReport(type: JacocoReport) {
        dependsOn = subprojects.jacocoTestReport
        additionalSourceDirs.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
        sourceDirectories.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
        classDirectories.setFrom files(subprojects.sourceSets.main.output)
        executionData.setFrom project.fileTree(dir: '.', include: '**/build/jacoco/test.exec')

        reports {
            xml.enabled true
            xml.destination = file("${buildDir}/jacoco/report.xml")
            csv.enabled false
            html.enabled true
            html.destination = file("${buildDir}/jacoco")
        }
    }
}




